@model IEnumerable<TradesCompany.Application.DTOs.QuotationByServicerMan>
@{
    Layout = "~/Views/Shared/Layouts/_EmployeeLayout.cshtml";
    ViewData["Title"] = "My Quotation";
}
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
<style>

    .card {
        box-shadow: 0 20px 27px 0 rgb(0 0 0 / 5%);
    }

    .avatar.sm {
        width: 2.25rem;
        height: 2.25rem;
        font-size: .818125rem;
    }

    .table-nowrap .table td, .table-nowrap .table th {
        white-space: nowrap;
    }

    .table > :not(caption) > * > * {
        padding: 0.75rem 1.25rem;
        border-bottom-width: 1px;
    }

    table th {
        font-weight: 600;
        background-color: #eeecfd !important;
    }
</style>
<div class="container">
    <div class="row">
        <div class="col-12 mb-3 mb-lg-3">
            <div class="overflow-hidden card table-nowrap table-card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Your Quotation</h5>
                </div>
                <div class="table-responsive">
                    @if (!Model.Any())
                    {
                        <h1 class="text-capitalize align-items-center text-center m-3 text-danger fw-bold">No Quotation Found</h1>
                    }
                    else
                    {
                        <table class="table mb-0">
                            <thead class="small text-uppercase bg-body text-muted">
                                <tr>
                                    <th>Customer Name</th>
                                    <th>Work Details</th>
                                    <th>Quotation Description</th>
                                    <th>Service Type</th>
                                    <th>Price</th>
                                    <th>Status</th>
                                    <th class="text-end">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var service in Model)
                                {
                                    <tr class="align-middle">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div>
                                                    <div class="h6 mb-0 lh-1">@service.CustomerName</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td>@service.WorkDetails</td>
                                        <td>@service.QuotationDescription</td>
                                        <td><span>@service.ServiceName</span></td>
                                        <td> <span class="d-inline-block align-middle">@service.Price</span></td>
                                        <td>@service.Status</td>
                                        <td class="text-end">
                                            <div class="drodown">
                                                <a data-bs-toggle="dropdown" href="#" class="btn p-1" aria-expanded="false">
                                                    <i class="fa fa-bars" aria-hidden="true"></i>
                                                </a>
                                                <div class="dropdown-menu dropdown-menu-end" style="">
                                                    @if (service.Status != "Completed" && service.Status != "Canceled")
                                                    {
                                                        <button data-id="@service.quotationId" class="dropdown-item cancel-btn">Cancel Service</button>
                                                    }
                                                    @if (service.Status == "Accepted")
                                                    {
                                                        <button data-id="@service.quotationId" class="dropdown-item schedule-btn">Schedule Services</button>
                                                    }
                                                    @if (service.Status != "Completed")
                                                    {
                                                        <button data-id="@service.quotationId" class="dropdown-item edit-btn">Edit Quotation</button>
                                                    }
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Schedule Service Modal -->
<div class="modal fade" id="scheduleModal" tabindex="-1" aria-labelledby="editQuotationLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border border-secondary shadow">
            <div class="modal-header">
                <h5 class="modal-title" id="editQuotationLabel">Schedule Service</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div class="mb-3">
                    <label for="scheduleDate" class="form-label">Select Date:</label>
                    <input type="date" id="scheduleDate" class="form-control" name="scheduleDate" required>
                </div>

                <div class="mb-3">
                    <label for="scheduleTime" class="form-label">Select Time:</label>
                    <input type="time" id="scheduleTime" class="form-control" name="scheduleTime" required>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" id="cancelSchedule" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="confirmSchedule">Schedule Service</button>
            </div>
        </div>
    </div>
</div>


<!-- Edit Quotation -->
<div class="modal fade" id="editQuotationModal" tabindex="-1" aria-labelledby="editQuotationLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editQuotationLabel">Edit Quotation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label for="QuotationDescription">Quotation escription</label>
                    <input type="text" class="form-control" id="editQuotationDescription" name="QuotationDescription" placeholder="Enter Quotation Description" />
                </div>

                <div class="form-group mb-3">
                    <label for="editPrice">Price</label>
                    <input type="number" class="form-control" id="editPrice" name="Price" placeholder="Enter Price" />
                </div>
                <div class="form-group mb-3">
                    <label for="gst">Gst</label>
                    <input type="number" class="form-control" id="gst" name="gst" readonly />
                </div>
                <div class="form-group mb-3">
                    <label for="platformfees">platformfees</label>
                    <input type="number" class="form-control" id="platformfees" name="platformfees" readonly />
                </div>
                <div class="form-group mb-3">
                    <label for="totalprice">totalprice</label>
                    <input type="number" class="form-control" id="totalprice" name="totalprice" readonly />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary cancel-edit" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary submit-edit">Save Changes</button>
            </div>
        </div>
    </div>
</div>




@section Scripts {
    <script>
        let currentQuotationId = null;

        // Set minimum date to today
        $(document).ready(function() {
            const today = new Date().toISOString().split('T')[0];
            $('#scheduleDate').attr('min', today);
        });

        // Show modal when schedule button is clicked
        $(document).on('click', '.schedule-btn', function () {
            currentQuotationId = $(this).data('id');
            // $('#scheduleModal').show();
            const modal = new bootstrap.Modal(document.getElementById('scheduleModal'));
            modal.show();
        });

        // Hide modal when cancel is clicked
        $('#cancelSchedule').click(function() {
            $('#scheduleModal').hide();
            resetForm();
        });

        // Hide modal when clicking outside
        $('#scheduleModal').click(function(e) {
            if (e.target === this) {
                $('#scheduleModal').hide();
                resetForm();
            }
        });

        // Handle form submission
        $('#confirmSchedule').click(function() {
            const date = $('#scheduleDate').val();
            const time = $('#scheduleTime').val();

            if (!date || !time) {
                alert('Please select both date and time.');
                return;
            }

            // Validate that selected datetime is in the future
            const selectedDateTime = new Date(date + 'T' + time);
            const now = new Date();

            if (selectedDateTime <= now) {
                alert('Please select a future date and time.');
                return;
            }

            const data = {
                quotationId: currentQuotationId,
                date: date,
                time: time
            };
            console.log(data);

            // Show loading state
            $('#confirmSchedule').prop('disabled', true).text('Scheduling...');

            $.ajax({
                url: '/Employee/ScheduleServices',
                type: 'POST',
                data: data,
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr) {
                    let errorMessage = 'Error scheduling service. Please try again.';

                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    } else if (xhr.responseText) {
                        try {
                            const errorResponse = JSON.parse(xhr.responseText);
                            errorMessage = errorResponse.message || errorMessage;
                        } catch (e) {
                            // Use default error message
                        }
                    }

                    alert(errorMessage);
                },
                complete: function() {
                    // Reset button state
                    $('#confirmSchedule').prop('disabled', false).text('Schedule Service');
                    $('#scheduleModal').hide();
                    resetForm();
                }
            });
        });

        function resetForm() {
            $('#scheduleDate').val('');
            $('#scheduleTime').val('');
            currentQuotationId = null;
        }

        $(document).on('click', '.cancel-btn', function () {
        const quotationId = $(this).data('id');
        console.log(quotationId);

        if (confirm('Are you sure you want to reject this Request?')) {
            $.ajax({
                url: `/Employee/QuotationCancel?quotationId=${quotationId}`,
                success: function (res) {
                    alert(res.message);
                    location.reload();
                },
                error: function (xhr) {
                    const err = xhr.responseJSON?.message || 'Error Rejecting Request';
                    alert(err);
                }
            });
        }
        });

        // Edit Button Click
        $(document).on('click', '.edit-btn', function () {
            currentQuotationId = $(this).data('id');

            $.ajax({
                url: `/Employee/GetQuotationDetails?quotationId=${currentQuotationId}`,
                type: 'GET',
                success: function (data) {
                    if (data) {
                        console.log(data.gst);
                        $('#editQuotationDescription').val(data.description || '');
                        $('#editPrice').val(data.servicemancharge || '');
                        $('#gst').val(data.gst || '');
                        $('#platformfees').val(data.platformfees || '');
                        $('#totalprice').val(data.totalprice || '');
                        const modal = new bootstrap.Modal(document.getElementById('editQuotationModal'));
                        modal.show();
                    }
                },
                error: function () {
                    alert('Unable to fetch quotation details.');
                }
            });
        });

        // Submit updated data
        $(document).on('click', '.submit-edit', function () {
            // Add Validation for empty fields
            if (!$('#editQuotationDescription').val().trim()) {
                $('#editQuotationDescription').addClass('is-invalid');
                $('#editQuotationDescription').siblings('.text-danger').text('Please provide valid price');
                return;
            }
            if (!$('#editPrice').val().trim() || $('#editPrice').val() <= 1) {
                $('#editPrice').addClass('is-invalid');
                $('#editPrice').siblings('.text-danger').text('Please provide valid price');
                return;
            }
            const updatedData = {
                quotationId: currentQuotationId,
                QuotationDescription: $('#editQuotationDescription').val(),
                price: $('#editPrice').val()
            };
            console.log("updated Data:" , updatedData);
            $.ajax({
                url: '/Employee/EditQuotation',
                type: 'POST',
                data: updatedData,
                success: function (res) {
                    alert(res.message || 'Quotation updated successfully.');
                    location.reload();
                },
                error: function (xhr) {
                    const msg = xhr.responseJSON?.message || 'Error updating quotation.';
                    alert(msg);
                }
            });
        });
    </script>
}