@model IEnumerable<TradesCompany.Application.DTOs.QuotationByServicerMan>
@{
    Layout = "~/Views/Shared/Layouts/_ELayout.cshtml";
    ViewData["Title"] = "My Quotation";
}
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
<style>
    body {
        margin-top: 20px;
        background: #eee;
    }

    .card {
        box-shadow: 0 20px 27px 0 rgb(0 0 0 / 5%);
    }

    .avatar.sm {
        width: 2.25rem;
        height: 2.25rem;
        font-size: .818125rem;
    }

    .table-nowrap .table td, .table-nowrap .table th {
        white-space: nowrap;
    }

    .table > :not(caption) > * > * {
        padding: 0.75rem 1.25rem;
        border-bottom-width: 1px;
    }

    table th {
        font-weight: 600;
        background-color: #eeecfd !important;
    }
</style>
<div class="container">
    <div class="row">
        <div class="col-12 mb-3 mb-lg-5">
            <div class="overflow-hidden card table-nowrap table-card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Your Quotation</h5>
                </div>
                <div class="table-responsive">
                    @if (!Model.Any())
                    {
                        <h1>No Quotation Found</h1>
                    }
                    else
                    {
                    <table class="table mb-0">
                        <thead class="small text-uppercase bg-body text-muted">
                            <tr>
                                <th>Customer Name</th>
                                <th>Work Details</th>
                                <th>Service Type</th>
                                <th>Price</th>
                                <th>Status</th>
                                <th class="text-end">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var service in Model)
                        {


                        <tr class="align-middle">
                            <td>
                                <div class="d-flex align-items-center">
                                    <div>
                                        <div class="h6 mb-0 lh-1">@service.CustomerName</div>
                                    </div>
                                </div>
                            </td>
                            <td>@service.WorkDetails</td>
                            <td><span>@service.ServiceName</span></td>
                            <td> <span class="d-inline-block align-middle">@service.Price</span></td>
                            <td>@service.Status</td>
                            <td class="text-end">
                                <div class="drodown">
                                    <a data-bs-toggle="dropdown" href="#" class="btn p-1" aria-expanded="false">
                                        <i class="fa fa-bars" aria-hidden="true"></i>
                                    </a>
                                    <div class="dropdown-menu dropdown-menu-end" style="">
                                        @if (service.Status == "Accepted")
                                        {
                                            <button data-id="@service.quotationId" class="dropdown-item cancel-btn">Cancel Service</button>
                                        }
                                        @if(service.Status == "Accepted")
                                        {
                                        <button data-id="@service.quotationId" class="dropdown-item schedule-btn">Schedule Service</button>
                                        }
                                    </div>
                                </div>
                            </td>
                        </tr>
                        }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Schedule Service Modal -->
<div id="scheduleModal" class="modal-overlay w-25">
    <div class="modal-content">
        <h4 style="margin-bottom: 20px;">Schedule Service</h4>
        <div class="form-group card-body">
            <label for="scheduleDate" class="form-label">Select Date:</label>
            <input type="date" id="scheduleDate" class="form-control" name="scheduleDate" required />
        </div>
        <div class="form-group">
            <label for="scheduleTime" class="form-label">Select Time:</label>
            <input type="time" id="scheduleTime" class="form-control" name="scheduleTime" required />
        </div>
        <div class="btn-group form-group">
            <button type="button" id="cancelSchedule">Cancel</button>
            <button type="button" class="btn-primary" id="confirmSchedule">Schedule Service</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentQuotationId = null;

        // Set minimum date to today
        $(document).ready(function() {
            const today = new Date().toISOString().split('T')[0];
            $('#scheduleDate').attr('min', today);
        });

        // Show modal when schedule button is clicked
        $(document).on('click', '.schedule-btn', function () {
            currentQuotationId = $(this).data('id');
            $('#scheduleModal').show();
        });

        // Hide modal when cancel is clicked
        $('#cancelSchedule').click(function() {
            $('#scheduleModal').hide();
            resetForm();
        });

        // Hide modal when clicking outside
        $('#scheduleModal').click(function(e) {
            if (e.target === this) {
                $('#scheduleModal').hide();
                resetForm();
            }
        });

        // Handle form submission
        $('#confirmSchedule').click(function() {
            const date = $('#scheduleDate').val();
            const time = $('#scheduleTime').val();

            if (!date || !time) {
                alert('Please select both date and time.');
                return;
            }

            // Validate that selected datetime is in the future
            const selectedDateTime = new Date(date + 'T' + time);
            const now = new Date();

            if (selectedDateTime <= now) {
                alert('Please select a future date and time.');
                return;
            }

            const data = {
                quotationId: currentQuotationId,
                date: date,
                time: time
            };
            console.log(data);

            // Show loading state
            $('#confirmSchedule').prop('disabled', true).text('Scheduling...');

            $.ajax({
                url: '/Employee/ScheduleServices',
                type: 'POST',
                data: data,
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr) {
                    let errorMessage = 'Error scheduling service. Please try again.';

                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMessage = xhr.responseJSON.message;
                    } else if (xhr.responseText) {
                        try {
                            const errorResponse = JSON.parse(xhr.responseText);
                            errorMessage = errorResponse.message || errorMessage;
                        } catch (e) {
                            // Use default error message
                        }
                    }

                    alert(errorMessage);
                },
                complete: function() {
                    // Reset button state
                    $('#confirmSchedule').prop('disabled', false).text('Schedule Service');
                    $('#scheduleModal').hide();
                    resetForm();
                }
            });
        });

        function resetForm() {
            $('#scheduleDate').val('');
            $('#scheduleTime').val('');
            currentQuotationId = null;
        }

        $(document).on('click', '.cancel-btn', function () {
        const quotationId = $(this).data('id');
        console.log(quotationId);

        if (confirm('Are you sure you want to reject this Request?')) {
            $.ajax({
                url: `/Employee/QuotationCancel?quotationId=${quotationId}`,
                success: function (res) {
                    alert(res.message);
                    location.reload();
                },
                error: function (xhr) {
                    const err = xhr.responseJSON?.message || 'Error Rejecting Request';
                    alert(err);
                }
            });
        }
        });

    </script>
}