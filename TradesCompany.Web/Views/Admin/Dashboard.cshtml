@using Newtonsoft.Json
@model TradesCompany.Application.DTOs.ChartModel;
@{
    Layout = "~/Views/Shared/Layouts/_AdminLayout.cshtml";
    ViewData["Title"] = "Admin Dashboard";
}
<style>
    
    .chartdiv{
    width:500px;
    height:250;
}
body{
    margin-top:20px;
    background:#FAFAFA;
}
.order-card {
    color: #fff;
}

.bg-c-blue {
    background: linear-gradient(45deg,#4099ff,#73b4ff);
}

.bg-c-green {
    background: linear-gradient(45deg,#2ed8b6,#59e0c5);
}

.bg-c-yellow {
    background: linear-gradient(45deg,#FFB64D,#ffcb80);
}

.bg-c-pink {
    background: linear-gradient(45deg,#FF5370,#ff869a);
}


.card {
    border-radius: 5px;
    -webkit-box-shadow: 0 1px 2.94px 0.06px rgba(4,26,55,0.16);
    box-shadow: 0 1px 2.94px 0.06px rgba(4,26,55,0.16);
    border: none;
    margin-bottom: 30px;
    -webkit-transition: all 0.3s ease-in-out;
    transition: all 0.3s ease-in-out;
}

.card .card-block {
    padding: 25px;
}

.order-card i {
    font-size: 26px;
}

.f-left {
    float: left;
}

.f-right {
    float: right;
}
.selectcontroll{
    width:250px;
    border:1px solid black;
    border-radius:5px;
}
.controlls {
    display: flex;
    flex-direction:row;
    column-gap:20px;
}
</style>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>


<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet">
<div class="container">
    <div class="row">
        <div class="col-md-4 col-xl-3">
            <div class="card bg-c-blue order-card">
                <div class="card-block">
                    <h6 class="m-b-20">Total Service Man</h6>
                    <h2 class="text-right"><span id="TotalServiceMan"></span></h2>
                </div>
            </div>
        </div>

        <div class="col-md-4 col-xl-3">
            <div class="card bg-c-green order-card">
                <div class="card-block">
                    <h6 class="m-b-20">Total Customer</h6>
                    <h2 class="text-right"><span id="TotalCustomer"></span></h2>
                </div>
            </div>
        </div>

        <div class="col-md-4 col-xl-3">
            <div class="card bg-c-yellow order-card">
                <div class="card-block">
                    <h6 class="m-b-20">Total Booking</h6>
                    <h2 class="text-right"><span id="TotalBooking"></span></h2>
                    <p class="m-b-0">Service Completed<span class="f-right" id="TotalBookingCompleted"></span></p>
                </div>
            </div>
        </div>

        <div class="col-md-4 col-xl-3">
            <div class="card bg-c-pink order-card">
                <div class="card-block">
                    <h6 class="m-b-20">Total Revenue</h6>
                    <h2 class="text-right"><span id="TotalRevenue"></span></h2>
                </div>
            </div>
        </div>
    </div>
</div>
   
<div class="controlls">
    <div class="form-group mb-2 selectcontroll">
        <select id="charttype" class="form-control">
            <option value="line">Line</option>
            <option value="bar">Bar</option>
            <option value="pie">Pie</option>
        </select>
    </div>
    <div class="form-group mb-2 selectcontroll">
        <select id="datatype" class="form-control">
            <option value="all">All</option>
            <option value="month">Month</option>
            <option value="year">Year</option>
        </select>
    </div>
    <div>
        <button id="downloadbtn" class="btn btn-info">DOWNLOAD</button>
    </div>
</div>

<div class="chartdiv">
<canvas id="myChart"></canvas>
</div>

@section Scripts {
    <script>
        var data = @Html.Raw(JsonConvert.SerializeObject(Model.Data));

        // const selectbtn = document.getElementById("charttype");
        // selectbtn.addEventListener('change',(e)=>{
        //     e.preventDefault();
        //     const charttype = document.getElementById("charttype").value;
        //     var ctx = document.getElementById('myChart').getContext('2d');
        //     var chart = new Chart(ctx, {
        //         type: charttype,
        //         data: {
        //             labels: data.map(x => x.Label),
        //             datasets: [{
        //                 label: 'My First dataset',
        //                 backgroundColor: generateRandomRGB(),
        //                 borderColor: generateRandomRGB(),
        //                 data: data.map(x => x.Value)
        //             }]
        //         },
        //         options: {
        //             indexAxis : 'Y'
        //         }
        //     });
        // })

        // AJAX CALL FOR EXCEL FILE
        $(document).on('click', '#downloadbtn', function () {
            debugger
        if (confirm('Are you sure you want to Download this Excel?')) {
            $.ajax({
            type: 'POST',
            url: '/Admin/DownloadExcel',
            data:{
                data : data
            },
            xhrFields: {
                responseType: 'blob' // Important for handling binary data
            },
            success: function(response) {
                // Handle the successful response
                var blob = new Blob([response], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                var downloadUrl = URL.createObjectURL(blob);

                var a = document.createElement("a");
                a.href = downloadUrl;
                a.download = "your_excel_file.xlsx"; // Desired filename
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a); // Clean up the temporary link
                URL.revokeObjectURL(downloadUrl); // Release the object URL
            },
            error: function(xhr, status, error) {
                console.error("Error downloading Excel:", error);
            }
        });
        }
        });

        // Random rgb generator
        function generateRandomRGB() {
          const red = Math.floor(Math.random() * 256); // Generates a random integer between 0 and 255 for red
          const green = Math.floor(Math.random() * 256); // Generates a random integer between 0 and 255 for green
          const blue = Math.floor(Math.random() * 256); // Generates a random integer between 0 and 255 for blue

          return `rgb(${red}, ${green}, ${blue})`; // Returns the RGB color string
        }

        $(document).ready(function() {
        $.ajax({
        url: '/Admin/GetAllDataForAdmin',
        type: 'GET',
        dataType: 'json',
        success: function(data) {
            console.log('AJAX call successful:', data);
            $('#TotalServiceMan').html(data.ServiceManCount);
            $('#TotalCustomer').html(data.UserCount);
            $('#TotalBooking').html(data.BookingCount);
            $('#TotalBookingCompleted').html(data.BookingCompleteCount);
            $('#TotalRevenue').html(data.TotalRevenue);
        },
        error: function(xhr, status, error) {
            console.error('AJAX call failed:', status, error);
        }
        });
    });

        const typebtn = document.getElementById("datatype")
        typebtn.addEventListener('change',(e)=>{
            e.preventDefault();
            const datatype = document.getElementById("datatype").value;
            const charttype = document.getElementById("charttype").value;
                $.ajax({
                url: `/Admin/ChartData?type=${datatype}`,
                type: 'POST',
                dataType: 'json',
                success: function(data) {
                    console.log(data.value)
                        console.log(data.value.map(v => v.revenue));
                                console.log(data.value.map(v => v.ServiceName));
                renderchart(data.value, charttype);
                },
                error: function(xhr, status, error) {
                    console.error('AJAX call failed:', status, error);
                }
            });
        })

        function renderchart(data, charttype) {
             var ctx = document.getElementById('myChart').getContext('2d');
                var chart = new Chart(ctx, {
                    type: charttype,
                    data: {
                            labels: data.map(x => x.ServiceName) || data.map(x => x.month),
                        datasets: [{
                            label: 'My First dataset',
                            backgroundColor: generateRandomRGB(),
                            borderColor: generateRandomRGB(),
                                data: data.map(x => x.revenue)
                        }]
                    },
                    options: {
                        indexAxis : 'Y'
                    }
                });
        }

    </script>
}   