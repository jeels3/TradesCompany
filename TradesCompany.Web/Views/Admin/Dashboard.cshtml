@using Newtonsoft.Json
@model TradesCompany.Application.DTOs.ChartModel;
@{
    Layout = "~/Views/Shared/Layouts/_AdminLayout.cshtml";
    ViewData["Title"] = "Admin Dashboard";
}
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
<select id="charttype">
    <option value="line">Line</option>
    <option value="bar">Bar</option>
    <option value="pie">Pie</option>
</select>
<button id="downloadbtn">DOWNLOAD</button>
<canvas id="myChart"></canvas>

<div class="px-40 flex flex-1 justify-center py-5">
    <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
        <!-- Summary Cards -->
        <div class="flex flex-wrap gap-4 p-4">
            @* Card 1 *@
            <div class="flex min-w-[158px] flex-1 flex-col gap-2 rounded-xl p-6 border border-[#cedce8]">
                <p class="text-base font-medium">Total Users</p>
                <p class="text-2xl font-bold">1,250</p>
                <p class="text-[#078838] text-base font-medium">+10%</p>
            </div>
            @* Card 2 *@
            <div class="flex min-w-[158px] flex-1 flex-col gap-2 rounded-xl p-6 border border-[#cedce8]">
                <p class="text-base font-medium">Active Bookings</p>
                <p class="text-2xl font-bold">345</p>
                <p class="text-[#078838] text-base font-medium">+5%</p>
            </div>
            @* Card 3 *@
            <div class="flex min-w-[158px] flex-1 flex-col gap-2 rounded-xl p-6 border border-[#cedce8]">
                <p class="text-base font-medium">New Claims</p>
                <p class="text-2xl font-bold">78</p>
                <p class="text-[#078838] text-base font-medium">+12%</p>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <script>
        var data = @Html.Raw(JsonConvert.SerializeObject(Model.Data));
        const selectbtn = document.getElementById("charttype");
        selectbtn.addEventListener('change',(e)=>{
            e.preventDefault();
            const charttype = document.getElementById("charttype").value;
            var ctx = document.getElementById('myChart').getContext('2d');
            var chart = new Chart(ctx, {
                type: charttype,
                data: {
                    labels: data.map(x => x.Label),
                    datasets: [{
                        label: 'My First dataset',
                        backgroundColor: generateRandomRGB(),
                        borderColor: generateRandomRGB(),
                        data: data.map(x => x.Value)
                    }]
                },
                options: {
                    indexAxis : 'Y'
                }
            });
        })

        // AJAX CALL FOR EXCEL FILE
        $(document).on('click', '#downloadbtn', function () {
            debugger
        if (confirm('Are you sure you want to Download this Excel?')) {
            $.ajax({
            type: 'POST',
            url: '/Admin/DownloadExcel',
            data:{
                data : data
            },
            xhrFields: {
                responseType: 'blob' // Important for handling binary data
            },
            success: function(response) {
                // Handle the successful response
                var blob = new Blob([response], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                var downloadUrl = URL.createObjectURL(blob);

                var a = document.createElement("a");
                a.href = downloadUrl;
                a.download = "your_excel_file.xlsx"; // Desired filename
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a); // Clean up the temporary link
                URL.revokeObjectURL(downloadUrl); // Release the object URL
            },
            error: function(xhr, status, error) {
                console.error("Error downloading Excel:", error);
            }
        });
        }
        });

        // Random rgb generator
        function generateRandomRGB() {
          const red = Math.floor(Math.random() * 256); // Generates a random integer between 0 and 255 for red
          const green = Math.floor(Math.random() * 256); // Generates a random integer between 0 and 255 for green
          const blue = Math.floor(Math.random() * 256); // Generates a random integer between 0 and 255 for blue

          return `rgb(${red}, ${green}, ${blue})`; // Returns the RGB color string
        }
    </script>
}